{"version":3,"sources":["Components/CartItem.js","Components/BuyPage.js","Components/Cart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CartItem","product","addInCart","Card","className","CardImg","top","height","width","src","smallImage","CardBody","CardTitle","productName","CardText","productPrice","Button","color","onClick","BuyPage","useState","setProduct","fetchPhotos","a","Axios","get","data","photos","allProduct","map","photo","medium","tinyImage","tiny","random","word","commerce","price","id","uuid","useEffect","Container","fluid","Row","Col","md","key","Cart","cartItem","removeItem","buyNow","amount","forEach","item","parseFloat","ListGroup","ListGroupItem","length","CardHeader","CardFooter","App","setCartItem","findIndex","array","toast","type","filter","singleItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.da41a480.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  Button,\n} from \"reactstrap\";\n\nconst CartItem = ({ product, addInCart }) => {\n  return (\n    <Card className=\"mt-2 mb-1\">\n      <CardImg top height=\"250\" width=\"100%\" src={product.smallImage} />\n      <CardBody className=\"text-center\">\n        <CardTitle>{product.productName}</CardTitle>\n        <CardText className=\"secondary\">\n          price: â‚¹{product.productPrice}\n        </CardText>\n        <Button color=\"success\" onClick={() => addInCart(product)}>\n          Buy Now\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default CartItem;\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { random, commerce } from \"faker\";\nimport CartItem from \"./CartItem\";\nimport { Container, Col, Row } from \"reactstrap\";\n\nconst apiKey = \"INSERT_YOUR_KEY_HERE\";\n\nconst url = \"https://api.pexels.com/v1/search?query=laptop&&per_page=6&&page=1\";\nconst localurl =\n  \"https://jsonware.com/json/7f26bf2c0233a09ad8426b4e6ad9ccbd.json\";\n\nconst BuyPage = ({ addInCart }) => {\n  const [product, setProduct] = useState([]);\n\n  //   const fetchPhotos = async () => {\n  //     const response = await Axios.get(url, {\n  //       header: {\n  //         Authorization: apikey,\n  //       },\n  //     });\n  const fetchPhotos = async () => {\n    const { data } = await Axios.get(localurl);\n\n    const { photos } = data;\n\n    const allProduct = photos.map((photo) => ({\n      smallImage: photo.src.medium,\n      tinyImage: photo.src.tiny,\n      productName: random.word(),\n      productPrice: commerce.price(),\n      id: random.uuid(),\n    }));\n\n    setProduct(allProduct);\n  };\n\n  useEffect(() => {\n    fetchPhotos();\n  }, []);\n\n  return (\n    <Container fluid>\n      <h1 className=\"text-success text-center\">Buy Page</h1>\n      <Row>\n        {product.map((product) => (\n          <Col md={4} key={product.id}>\n            <CartItem product={product} addInCart={addInCart} />\n          </Col>\n        ))}\n      </Row>\n    </Container>\n  );\n};\n\nexport default BuyPage;\n","import React from \"react\";\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  CardHeader,\n  CardBody,\n  Card,\n  CardFooter,\n  Col,\n  Row,\n} from \"reactstrap\";\n\nimport CartItem from \"./CartItem\";\n\nconst Cart = ({ cartItem, removeItem, buyNow }) => {\n  let amount = 0;\n\n  cartItem.forEach((item) => {\n    amount = parseFloat(amount) + parseFloat(item.productPrice);\n  });\n\n  return (\n    <Container fluid>\n      <h1 className=\"text-succes\">Your Cart</h1>\n      <ListGroup>\n        {cartItem.map((item) => (\n          <ListGroupItem key={item.id}>\n            <Row>\n              <Col>\n                <img height={80} src={item.tinyImage} />\n              </Col>\n              <Col className=\"text-center\">\n                <div className=\"text-primary\">{item.productName}</div>\n                <span>price :- {item.productPrice}</span>\n                <Button color=\"danger\" onClick={() => removeItem(item)}>\n                  Remove\n                </Button>\n              </Col>\n            </Row>\n          </ListGroupItem>\n        ))}\n      </ListGroup>\n      {/* if everything is empty */}\n      {cartItem.length >= 1 ? (\n        <Card className=\"text-center mt-3\">\n          <CardHeader>Grand Total</CardHeader>\n          <CardBody>\n            Your amount for {cartItem.length} product is {amount}\n          </CardBody>\n          <CardFooter>\n            <Button color=\"success\" onClick={buyNow}>\n              Pay Here\n            </Button>\n          </CardFooter>\n        </Card>\n      ) : (\n        <h1 className=\"text-warning\">Cart is empty</h1>\n      )}\n    </Container>\n  );\n};\n\nexport default Cart;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nimport { Container, Row, Col } from \"reactstrap\";\nimport { toast, ToastContainer } from \"react-toastify\";\n\nimport BuyPage from \"./Components/BuyPage\";\nimport Cart from \"./Components/Cart\";\n\nfunction App() {\n  const [cartItem, setCartItem] = useState([]);\n\n  const addInCart = (item) => {\n    const isAlreadyAdded = cartItem.findIndex(function (array) {\n      return array.id === item.id;\n    });\n\n    if (isAlreadyAdded !== -1) {\n      toast(\"already added in cart\", {\n        type: \"error\",\n      });\n      return;\n    }\n\n    setCartItem([...cartItem, item]);\n  };\n\n  const removeItem = (item) => {\n    setCartItem(cartItem.filter((singleItem) => singleItem.id !== item.id));\n  };\n\n  const buyNow = () => {\n    setCartItem([]);\n\n    toast(\"Purchase Complete\", {\n      type: \"success\",\n    });\n  };\n\n  return (\n    <Container fluid>\n      <ToastContainer />\n      <Row>\n        <Col md=\"8\">\n          <BuyPage addInCart={addInCart} />\n        </Col>\n        <Col md=\"4\">\n          <Cart cartItem={cartItem} removeItem={removeItem} buyNow={buyNow} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}